#!/usr/bin/env python
"""
Script kh·ªüi ƒë·ªông t·∫•t c·∫£ services v·ªõi log output t·ªëi gi·∫£n
Ch·ªâ hi·ªÉn th·ªã th√¥ng tin quan tr·ªçng, kh√¥ng spam log
"""
import os
import sys
import time
import subprocess
import signal
from typing import List, Dict
import threading

# Add current directory to path for libs imports
sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))

class QuietMonorepoManager:
    def __init__(self):
        self.base_dir = os.path.dirname(os.path.abspath(__file__))
        self.processes: Dict[str, subprocess.Popen] = {}
        self.services: Dict[str, Dict] = {
            "Auth Service": {
                "path": os.path.join(self.base_dir, "services", "auth"),
                "script": "start.py",
                "port": 8001,
                "url": "http://localhost:8001"
            },
            "Articles Service": {
                "path": os.path.join(self.base_dir, "services", "articles"),
                "script": "start.py", 
                "port": 8002,
                "url": "http://localhost:8002"
            },
            "Products Service": {
                "path": os.path.join(self.base_dir, "services", "products"),
                "script": "start.py",
                "port": 8003,
                "url": "http://localhost:8003"
            },
            "API Gateway": {
                "path": self.base_dir,
                "script": "start_gateway.py",
                "port": 8080,
                "url": "http://localhost:8080"
            }
        }
        self.running = True
    
    def print_banner(self):
        """In banner ch√†o m·ª´ng ng·∫Øn g·ªçn"""
        print("\n" + "="*50)
        print("üöÄ KH·ªûI ƒê·ªòNG FASTAPI MONOREPO")
        print("="*50)
    
    def check_port(self, port: int) -> bool:
        """Ki·ªÉm tra port c√≥ ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng kh√¥ng"""
        import socket
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = sock.connect_ex(('localhost', port))
        sock.close()
        return result == 0
    
    def start_service(self, name: str, config: Dict) -> subprocess.Popen:
        """Kh·ªüi ƒë·ªông m·ªôt service (silent mode)"""
        # Kh·ªüi ƒë·ªông service v·ªõi output redirect sang DEVNULL
        process = subprocess.Popen(
            [sys.executable, config['script']],
            cwd=config['path'],
            stdout=subprocess.DEVNULL,  # Kh√¥ng hi·ªÉn th·ªã output
            stderr=subprocess.DEVNULL,  # Kh√¥ng hi·ªÉn th·ªã error
            universal_newlines=True
        )
        return process
    
    def start_all(self):
        """Kh·ªüi ƒë·ªông t·∫•t c·∫£ services"""
        self.print_banner()
        
        print("\n‚è≥ ƒêang kh·ªüi ƒë·ªông c√°c services...")
        
        for name, config in self.services.items():
            try:
                # Ki·ªÉm tra v√† d·ª´ng process c≈© n·∫øu c·∫ßn
                if self.check_port(config['port']):
                    print(f"   ‚Ä¢ {name}: Port {config['port']} ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng, ƒëang cleanup...")
                    # Kill process c≈© tr√™n Windows
                    if os.name == 'nt':
                        subprocess.run(
                            f"for /f \"tokens=5\" %a in ('netstat -aon ^| findstr :{config['port']}') do taskkill /PID %a /F",
                            shell=True,
                            stdout=subprocess.DEVNULL,
                            stderr=subprocess.DEVNULL
                        )
                        time.sleep(1)
                
                process = self.start_service(name, config)
                self.processes[name] = process
                
                # ƒê·ª£i service kh·ªüi ƒë·ªông
                time.sleep(2)
                
                # Ki·ªÉm tra service ƒë√£ l√™n ch∆∞a
                if self.check_port(config['port']):
                    print(f"   ‚úÖ {name}: Port {config['port']}")
                else:
                    print(f"   ‚è≥ {name}: ƒêang kh·ªüi ƒë·ªông...")
                    
            except Exception as e:
                print(f"   ‚ùå {name}: L·ªói - {e}")
        
        print("\n" + "="*50)
        print("‚ú® H·ªÜ TH·ªêNG ƒê√É S·∫¥N S√ÄNG!")
        print("="*50)
        print("\nüìå Truy c·∫≠p:")
        print("   ‚Ä¢ API Gateway: http://localhost:8080")
        print("   ‚Ä¢ Swagger Docs: http://localhost:8080/docs")
        print("   ‚Ä¢ Dashboard: http://localhost:8080/dashboard")
        print("\n‚õî Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng t·∫•t c·∫£ services")
        print("="*50)
    
    def monitor_quietly(self):
        """Monitor services m√† kh√¥ng spam log"""
        while self.running:
            time.sleep(30)  # Check m·ªói 30 gi√¢y
            
            # Ch·ªâ ki·ªÉm tra v√† restart n·∫øu service ch·∫øt
            for name, process in self.processes.items():
                if process.poll() is not None:
                    print(f"\n‚ö†Ô∏è  {name} ƒë√£ d·ª´ng, ƒëang kh·ªüi ƒë·ªông l·∫°i...")
                    config = self.services[name]
                    new_process = self.start_service(name, config)
                    self.processes[name] = new_process
    
    def stop_all(self):
        """D·ª´ng t·∫•t c·∫£ services"""
        self.running = False
        print("\n\nüõë ƒêang d·ª´ng t·∫•t c·∫£ services...")
        
        for name, process in self.processes.items():
            try:
                process.terminate()
                process.wait(timeout=3)
                print(f"   ‚Ä¢ {name}: ƒê√£ d·ª´ng")
            except:
                try:
                    process.kill()
                    print(f"   ‚Ä¢ {name}: ƒê√£ force stop")
                except:
                    pass
        
        print("\n‚úÖ ƒê√£ d·ª´ng to√†n b·ªô h·ªá th·ªëng!\n")
    
    def run(self):
        """Ch·∫°y h·ªá th·ªëng"""
        try:
            # Kh·ªüi ƒë·ªông t·∫•t c·∫£ services
            self.start_all()
            
            # Monitor trong background thread
            monitor_thread = threading.Thread(target=self.monitor_quietly)
            monitor_thread.daemon = True
            monitor_thread.start()
            
            # ƒê·ª£i user nh·∫•n Ctrl+C
            while self.running:
                time.sleep(1)
                
        except KeyboardInterrupt:
            self.stop_all()
            sys.exit(0)
        except Exception as e:
            print(f"\n‚ùå L·ªói h·ªá th·ªëng: {e}")
            self.stop_all()
            sys.exit(1)

def main():
    """Main function"""
    manager = QuietMonorepoManager()
    
    # ƒêƒÉng k√Ω signal handler
    def signal_handler(sig, frame):
        manager.stop_all()
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    
    # Ch·∫°y h·ªá th·ªëng
    manager.run()

if __name__ == "__main__":
    main()
